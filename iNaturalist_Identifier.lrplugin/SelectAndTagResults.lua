--[[
============================================================
Description fonctionnelle
------------------------------------------------------------
Ce module `selectAndTagResults.lua` analyse une cha√Æne de texte 
r√©sultant d‚Äôune identification d‚Äôanimaux (r√©sultats d‚ÄôiNaturalist), 
extrait la liste des esp√®ces reconnues, puis affiche une interface 
√† l‚Äôutilisateur Lightroom lui permettant de s√©lectionner celles √† 
ajouter comme mots-cl√©s √† la photo active.

Fonctionnalit√©s principales :
1. Identifier la photo s√©lectionn√©e dans le catalogue Lightroom.
2. Parser la cha√Æne de r√©sultats pour extraire chaque esp√®ce d√©tect√©e 
   avec son nom fran√ßais, nom latin et pourcentage de confiance.
3. Afficher une fen√™tre modale listant ces esp√®ces sous forme de 
   cases √† cocher.
4. Permettre √† l‚Äôutilisateur de s√©lectionner les esp√®ces √† ajouter 
   comme mots-cl√©s Lightroom.
5. Cr√©er les mots-cl√©s s‚Äôils n‚Äôexistent pas, puis les ajouter √† la photo.
6. Journaliser les diff√©rentes √©tapes et afficher des messages 
   d‚Äôerreur ou succ√®s.

------------------------------------------------------------
√âtapes num√©rot√©es
1. Importer les modules Lightroom n√©cessaires et le logger.
2. D√©finir la fonction `showSelection` qui :
    2.1. R√©cup√©rer la photo active dans le catalogue.
    2.2. V√©rifier si une photo est s√©lectionn√©e, sinon loguer et quitter.
    2.3. Trouver la section des r√©sultats dans la cha√Æne re√ßue.
    2.4. Extraire les esp√®ces avec nom fran√ßais, latin, et pourcentage.
    2.5. V√©rifier si des esp√®ces ont √©t√© d√©tect√©es, sinon loguer et quitter.
    2.6. Cr√©er une interface modale avec des cases √† cocher pour chaque esp√®ce.
    2.7. Lorsque l‚Äôutilisateur valide, collecter les esp√®ces s√©lectionn√©es.
    2.8. Si aucune s√©lection, avertir l‚Äôutilisateur et quitter.
    2.9. Ajouter les mots-cl√©s √† la photo (cr√©ation si n√©cessaire).
    2.10. Loguer l‚Äôajout et afficher un message de succ√®s.
    2.11. Si annulation, loguer l‚Äôaction.
3. Exporter la fonction pour usage externe.

------------------------------------------------------------
Scripts appel√©s
- Logger.lua (pour journaliser)
- Lightroom SDK (pour interface, gestion catalogue et mots-cl√©s)

------------------------------------------------------------
Script appelant
- AnimalIdentifier.lua (apr√®s identification, pour proposer les mots-cl√©s)
============================================================
]]

-- [√âtape 1] Import Lightroom SDK modules
local LrDialogs = import "LrDialogs"
local LrFunctionContext = import "LrFunctionContext"
local LrBinding = import "LrBinding"
local LrView = import "LrView"
local LrApplication = import "LrApplication"

-- [√âtape 1] Import logger
local logger = require("Logger")

-- [√âtape 2] Fonction principale : afficher le choix des esp√®ces √† taguer
local function showSelection(resultsString)
    -- [2.1] R√©cup√©rer la photo active
    local catalog = LrApplication.activeCatalog()
    local photo = catalog:getTargetPhoto()
    
    -- [2.2] V√©rifier s√©lection photo
    if not photo then
        logger.logMessage(LOC("$$$/iNat/NoPhotoSelected=No photo selected."))
        return
    end

    -- [2.3] Trouver la section des r√©sultats d‚Äôanimaux reconnus
    local startIndex = resultsString:find("üïäÔ∏è%s*Animaux reconnus%s*:") or resultsString:find("üïäÔ∏è%s*Recognized animals%s*:")
    if not startIndex then
        logger.logMessage(LOC("$$$/iNat/UnknownFormat=Unrecognized result format."))
        return
    end

    -- [2.4] Extraire les esp√®ces et leurs infos (nom FR, latin, confiance %)
    local subResult = resultsString:sub(startIndex)
    local parsedItems = {}

    for line in subResult:gmatch("[^\r\n]+") do
        local nom_fr, nom_latin, pourcent = line:match("%- (.-) %((.-)%)%s*:%s*([%d%.]+)%%")
        if nom_fr and nom_latin and pourcent then
            local label = string.format("%s (%s) ‚Äî %s%%", nom_fr, nom_latin, pourcent)
            local keyword = string.format("%s (%s)", nom_fr, nom_latin)
            table.insert(parsedItems, { label = label, keyword = keyword })
        end
    end

    -- [2.5] V√©rifier qu‚Äôau moins une esp√®ce a √©t√© d√©tect√©e
    if #parsedItems == 0 then
        logger.logMessage(LOC("$$$/iNat/NoSpeciesDetected=No species detected."))
        return
    end

    -- [2.6] Cr√©er interface modale avec cases √† cocher pour chaque esp√®ce
    LrFunctionContext.callWithContext("showSelection", function(context)
        local f = LrView.osFactory()
        local props = LrBinding.makePropertyTable(context)
        local checkboxes = {}

        for i, item in ipairs(parsedItems) do
            local key = "item_" .. i
            props[key] = false
            table.insert(checkboxes, f:checkbox {
                title = item.label,
                value = LrView.bind(key)
            })
        end

        local contents = f:scrolled_view {
            width = 500,
            height = 300,
            bind_to_object = props,
            f:column(checkboxes)
        }

        -- [2.7] Afficher le dialogue et attendre r√©ponse utilisateur
        local result = LrDialogs.presentModalDialog {
            title = LOC("$$$/iNat/DialogTitle=Select species to add as keywords"),
            contents = contents,
            actionVerb = LOC("$$$/iNat/AddKeywords=Add")
        }

        -- [2.8] Si utilisateur valide, r√©cup√©rer s√©lection
        if result == "ok" then
            local selectedKeywords = {}

            for i, item in ipairs(parsedItems) do
                local key = "item_" .. i
                if props[key] == true then
                    table.insert(selectedKeywords, item.keyword)
                end
            end

            -- [2.9] Si aucune s√©lection, informer et quitter
            if #selectedKeywords == 0 then
                logger.logMessage(LOC("$$$/iNat/NoKeywordsSelected=No keywords selected."))
                LrDialogs.message(
                    LOC("$$$/iNat/NoSpeciesCheckedTitle=No species selected"),
                    LOC("$$$/iNat/NoKeywordsMessage=No keywords will be added.")
                )
                return
            end

            -- [2.10] Ajouter mots-cl√©s s√©lectionn√©s √† la photo (cr√©ation si n√©cessaire)
            catalog:withWriteAccessDo(LOC("$$$/iNat/AddKeywordsWriteAccess=Adding keywords"), function()
                local function getOrCreateKeyword(name)
                    for _, kw in ipairs(catalog:getKeywords()) do
                        if kw:getName() == name then
                            return kw
                        end
                    end
                    return catalog:createKeyword(name, {}, true, nil, true)
                end

                for _, keyword in ipairs(selectedKeywords) do
                    local kw = getOrCreateKeyword(keyword)
                    if kw then
                        photo:addKeyword(kw)
                    end
                end
            end)

            logger.logMessage(LOC("$$$/iNat/KeywordsAdded=Keywords added: ") .. table.concat(selectedKeywords, ", "))
            LrDialogs.message(
                LOC("$$$/iNat/SuccessTitle=Success"),
                LOC("$$$/iNat/SuccessMessage=Selected keywords have been successfully added.")
            )
        else
            -- [2.11] Log annulation utilisateur
            logger.logMessage(LOC("$$$/iNat/DialogCancelled=Dialog cancelled."))
        end
    end)
end

-- [√âtape 3] Export fonction
return {
    showSelection = showSelection
}
