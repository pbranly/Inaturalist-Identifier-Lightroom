--[[
============================================================
Description fonctionnelle
------------------------------------------------------------
Ce module `VerificationToken.lua` v√©rifie la validit√© du token 
d‚Äôauthentification iNaturalist stock√© dans les pr√©f√©rences du plugin.

Fonctionnalit√©s principales :
1. Lire le token depuis les pr√©f√©rences Lightroom.
2. Ex√©cuter une requ√™te HTTP (via curl) √† l‚ÄôAPI iNaturalist pour 
   v√©rifier la validit√© du token.
3. Analyser le code de r√©ponse HTTP pour d√©terminer si le token 
   est valide, expir√©, ou si une erreur est survenue.
4. Journaliser chaque √©tape et r√©sultat pour faciliter le debug.
5. Retourner un bool√©en et un message d√©crivant l‚Äô√©tat du token.

------------------------------------------------------------
√âtapes num√©rot√©es
1. Importer les modules Lightroom n√©cessaires et le module de log.
2. Charger les pr√©f√©rences du plugin.
3. Loguer le chargement du module.
4. D√©finir la fonction `isTokenValid` qui :
    4.1. Loguer le d√©but de la v√©rification.
    4.2. R√©cup√©rer le token dans les pr√©f√©rences.
    4.3. V√©rifier si le token est absent ou vide.
    4.4. Construire la commande curl pour interroger l‚ÄôAPI iNaturalist.
    4.5. Ex√©cuter la commande et r√©cup√©rer le code HTTP.
    4.6. Loguer le code HTTP re√ßu.
    4.7. Retourner vrai si le code est 200, sinon faux avec message d‚Äôerreur.
5. Exporter la fonction pour usage externe.

------------------------------------------------------------
Scripts appel√©s
- Logger.lua (pour journaliser les √©v√©nements)

------------------------------------------------------------
Script appelant
- AnimalIdentifier.lua (pour valider le token avant identification)
============================================================
]]

-- [√âtape 1] Lightroom module imports
local LrPrefs     = import "LrPrefs"
local LrPathUtils = import "LrPathUtils"
local LrFileUtils = import "LrFileUtils"
local LrDialogs   = import "LrDialogs"

-- [√âtape 1] Custom logging module
local logger = require("Logger")

-- [√âtape 2] Load plugin preferences
local prefs = LrPrefs.prefsForPlugin()

-- [√âtape 3] Log module load
logger.logMessage(LOC("$$$/iNat/Log/VerificationModuleLoaded===== Loaded VerificationToken.lua module ====="))

-- [√âtape 4] Validates the iNaturalist token using the API
local function isTokenValid()
    -- [4.1] Log start of validation
    logger.logMessage(LOC("$$$/iNat/Log/TokenCheckStart=== Start of isTokenValid() ==="))

    -- [4.2] Retrieve token
    local token = prefs.token
    -- [4.3] Check for missing or empty token
    if not token or token == "" then
        local msg = LOC("$$$/iNat/Log/TokenMissing=‚õî No token found in Lightroom preferences.")
        logger.logMessage(msg)
        return false, msg
    end

    -- Log token length (for info only)
    logger.logMessage(LOC("$$$/iNat/Log/TokenDetected=üîë Token detected (length: ") .. tostring(#token) .. LOC("$$$/iNat/Log/Chars= characters)"))

    -- [4.4] Build curl command to verify token validity
    local url = "https://api.inaturalist.org/v1/users/me"
    local command = string.format(
        'curl -s -o /dev/null -w "%%{http_code}" -H "Authorization: Bearer %s" "%s"',
        token,
        url
    )

    -- Log curl command
    logger.logMessage(LOC("$$$/iNat/Log/CurlCommand=üìé Executing curl command: ") .. command)

    -- [4.5] Execute the command and read HTTP response code
    local handle = io.popen(command)
    local httpCode = handle:read("*l")
    handle:close()

    -- [4.6] Log HTTP code
    logger.logMessage(LOC("$$$/iNat/Log/HttpCode=‚û°Ô∏è HTTP response code from iNaturalist: ") .. tostring(httpCode))

    local msg
    -- [4.7] Analyze HTTP code and return result accordingly
    if httpCode == "200" then
        msg = LOC("$$$/iNat/Log/TokenValid=‚úÖ Success: token is valid.")
        logger.logMessage(msg)
        return true, msg
    elseif httpCode == "401" then
        msg = LOC("$$$/iNat/Log/TokenInvalid=‚ùå Failure: token is invalid or expired (401 Unauthorized).")
    elseif httpCode == "500" then
        msg = LOC("$$$/iNat/Log/ServerError=üí• iNaturalist server error (500).")
    elseif httpCode == "000" or not httpCode then
        msg = LOC("$$$/iNat/Log/NoHttpCode=‚ö†Ô∏è No HTTP code received. Check internet or curl installation.")
    else
        msg = LOC("$$$/iNat/Log/UnexpectedCode=‚ö†Ô∏è Unexpected response (code ") .. tostring(httpCode) .. ")."
    end

    logger.logMessage(msg)
    return false, msg
end

-- [√âtape 5] Export function
return {
    isTokenValid = isTokenValid
}
