--[[
============================================================
Description fonctionnelle
------------------------------------------------------------
Ce script d√©finit la fonction `identifyAnimal()` qui constitue 
le c≈ìur du processus d‚Äôidentification d‚Äôanimaux dans Lightroom.
Lorsqu‚Äôil est appel√© (depuis main.lua), il ex√©cute les actions 
suivantes :

1. Lance une t√¢che asynchrone Lightroom.
2. Initialise le journal (log) et affiche un message de d√©marrage.
3. R√©cup√®re et v√©rifie le jeton d‚Äôacc√®s (token) dans les pr√©f√©rences.
4. Valide le token via un module de v√©rification.
5. R√©cup√®re la photo s√©lectionn√©e dans le catalogue Lightroom.
6. Affiche et journalise le nom de la photo s√©lectionn√©e.
7. Nettoie les JPEG temporaires existants dans le dossier du plugin.
8. Configure les param√®tres d‚Äôexportation (format, taille, qualit√©).
9. Exporte la photo s√©lectionn√©e dans le dossier du plugin.
10. Renomme le fichier export√© en `tempo.jpg`.
11. Lance le script Python d‚Äôidentification.
12. Affiche et journalise les r√©sultats d‚Äôidentification.
13. Propose √† l‚Äôutilisateur d‚Äôajouter les identifications comme mots-cl√©s.
14. Si accept√©, lance le module de s√©lection et de marquage.
15. Affiche un message de fin d‚Äôanalyse.

------------------------------------------------------------
√âtapes num√©rot√©es
1. Importer les modules Lightroom requis.
2. Importer les modules personnalis√©s du plugin.
3. D√©finir la fonction principale `identifyAnimal`.
4. Lancer une t√¢che asynchrone Lightroom.
5. Initialiser le log et notifier le d√©marrage.
6. R√©cup√©rer le token depuis les pr√©f√©rences.
7. Si le token est vide ou absent, lancer le script de mise √† jour.
8. V√©rifier la validit√© du token.
9. Si invalide, lancer le script de mise √† jour.
10. R√©cup√©rer la photo s√©lectionn√©e.
11. Si aucune photo, journaliser et arr√™ter.
12. Afficher le nom du fichier s√©lectionn√©.
13. Supprimer les JPEG existants dans le dossier du plugin.
14. D√©finir les param√®tres d‚Äôexportation.
15. Lancer l‚Äôexport de la photo.
16. V√©rifier que l‚Äôexport a r√©ussi.
17. Renommer l‚Äôimage export√©e en `tempo.jpg`.
18. Lancer le script Python d‚Äôidentification.
19. V√©rifier le r√©sultat du script Python.
20. Afficher les r√©sultats et demander √† l‚Äôutilisateur s‚Äôil veut taguer.
21. Si oui, appeler le module de s√©lection et marquage.
22. Si non, journaliser que le marquage est ignor√©.
23. Si aucun r√©sultat, afficher un message d‚Äôabsence de r√©sultat.
24. Journaliser et notifier la fin du processus.

------------------------------------------------------------
Scripts appel√©s
- Logger.lua
- ImageUtils.lua
- PythonRunner.lua
- TokenUpdater.lua
- VerificationToken.lua
- SelectAndTagResults.lua
- identifier_animal.py (script Python)

------------------------------------------------------------
Script appelant
- main.lua ‚Üí appel√© depuis Lightroom via Info.lua
============================================================
]]

-- [√âtape 1] Import required Lightroom modules
local LrTasks = import "LrTasks"
local LrDialogs = import "LrDialogs"
local LrApplication = import "LrApplication"
local LrPathUtils = import "LrPathUtils"
local LrFileUtils = import "LrFileUtils"
local LrExportSession = import "LrExportSession"
local LrPrefs = import "LrPrefs"

-- [√âtape 2] Custom modules
local logger = require("Logger")
local imageUtils = require("ImageUtils")
local pythonRunner = require("PythonRunner")
local tokenUpdater = require("TokenUpdater")
local tokenChecker = require("VerificationToken")

-- [√âtape 3] Main function: exports selected photo, runs Python script, and handles result
local function identifyAnimal()
    -- [√âtape 4] Launch asynchronous Lightroom task
    LrTasks.startAsyncTask(function()
        -- [√âtape 5] Initialization
        logger.initializeLogFile()
        logger.logMessage("Plugin started")
        LrDialogs.showBezel(LOC("$$$/iNat/Bezel/PluginStarted=Plugin started"), 3)

        -- [√âtape 6] Retrieve token from preferences
        local prefs = LrPrefs.prefsForPlugin()
        local token = prefs.token

        -- [√âtape 7] Check if token is missing
        if not token or token == "" then
            logger.notify(LOC("$$$/iNat/Error/MissingToken=Token is missing. Please enter it in Preferences."))
            tokenUpdater.runUpdateTokenScript()
            return
        end

        -- [√âtape 8] Validate token
        local isValid, msg = tokenChecker.isTokenValid()
        -- [√âtape 9] If token invalid, prompt update
        if not isValid then
            logger.notify(LOC("$$$/iNat/Error/InvalidToken=Invalid or expired token."))
            tokenUpdater.runUpdateTokenScript()
            return
        end

        -- [√âtape 10] Get the selected photo
        local catalog = LrApplication.activeCatalog()
        local photo = catalog:getTargetPhoto()
        -- [√âtape 11] Stop if no photo selected
        if not photo then
            logger.logMessage("No photo selected.")
            LrDialogs.showBezel(LOC("$$$/iNat/Bezel/NoPhoto=No photo selected."), 3)
            return
        end

        -- [√âtape 12] Display selected photo filename
        local filename = photo:getFormattedMetadata("fileName") or "unknown"
        logger.logMessage("Selected photo: " .. filename)
        LrDialogs.showBezel(LOC("$$$/iNat/Bezel/PhotoName=Selected photo: ") .. filename, 3)

        -- [√âtape 13] Prepare export folder and cleanup
        local pluginFolder = _PLUGIN.path
        imageUtils.clearJPEGs(pluginFolder)
        logger.logMessage("Previous JPEGs deleted.")
        LrDialogs.showBezel(LOC("$$$/iNat/Bezel/Cleared=Previous image removed."), 3)

        -- [√âtape 14] Export settings
        local exportSettings = {
            LR_export_destinationType = "specificFolder",
            LR_export_destinationPathPrefix = pluginFolder,
            LR_export_useSubfolder = false,
            LR_format = "JPEG",
            LR_jpeg_quality = 0.8,
            LR_size_resizeType = "wh",
            LR_size_maxWidth = 1024,
            LR_size_maxHeight = 1024,
            LR_size_doNotEnlarge = true,
            LR_renamingTokensOn = true,
            LR_renamingTokens = "{{image_name}}",
        }

        -- [√âtape 15] Perform export
        local exportSession = LrExportSession({
            photosToExport = { photo },
            exportSettings = exportSettings
        })

        local success = LrTasks.pcall(function()
            exportSession:doExportOnCurrentTask()
        end)

        -- [√âtape 16] Check if export succeeded
        local exportedPath = imageUtils.findSingleJPEG(pluginFolder)
        if not exportedPath then
            logger.logMessage("Failed to export temporary image.")
            LrDialogs.showBezel(LOC("$$$/iNat/Bezel/ExportFailed=Temporary export failed."), 3)
            return
        end

        -- [√âtape 17] Rename the exported file to tempo.jpg
        local finalPath = LrPathUtils.child(pluginFolder, "tempo.jpg")
        local ok, err = LrFileUtils.move(exportedPath, finalPath)
        if not ok then
            local msg = string.format("Error renaming file: %s", err or "unknown")
            logger.logMessage(msg)
            LrDialogs.showBezel(msg, 3)
            return
        end

        logger.logMessage("Image exported as tempo.jpg")
        LrDialogs.showBezel(LOC("$$$/iNat/Bezel/Exported=Image exported to tempo.jpg"), 3)

        -- [√âtape 18] Run Python identification script
        local result = pythonRunner.runPythonIdentifier(
            LrPathUtils.child(pluginFolder, "identifier_animal.py"),
            finalPath,
            token
        )

        -- [√âtape 19] Check and display result
        if result:match("üïäÔ∏è") then
            -- [√âtape 20] Display results and ask user if tagging is desired
            local titre = LOC("$$$/iNat/Title/Result=Identification results:")
            logger.logMessage(titre .. "\n" .. result)
            LrDialogs.message(titre, result)

            local choix = LrDialogs.confirm(
                LOC("$$$/iNat/Confirm/Ask=Do you want to add one or more identifications as keywords?"),
                LOC("$$$/iNat/Confirm/Hint=Click 'Continue' to select species."),
                LOC("$$$/iNat/Confirm/Continue=Continue"),
                LOC("$$$/iNat/Confirm/Cancel=Cancel")
            )

            -- [√âtape 21] If yes, run selection and tagging module
            if choix == "ok" then
                local selector = require("SelectAndTagResults")
                selector.showSelection(result)
            else
                -- [√âtape 22] If no, log skipping
                logger.logMessage("Keyword tagging skipped by user.")
            end
        else
            -- [√âtape 23] No results from Python script
            LrDialogs.showBezel(LOC("$$$/iNat/Bezel/ResultNone=No identification results ‚ùå"), 3)
            LrDialogs.showBezel(LOC("$$$/iNat/Bezel/NoneFound=No results found."), 3)
        end

        -- [√âtape 24] Final log and notification
        logger.logMessage("Analysis completed.")
        LrDialogs.showBezel(LOC("$$$/iNat/Bezel/AnalysisDone=Analysis completed."), 3)
    end)
end

return {
    identify = identifyAnimal
}
